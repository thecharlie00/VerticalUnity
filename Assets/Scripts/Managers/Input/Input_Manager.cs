//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/Input_Manager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Manager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Manager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Manager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ce0c47f9-6acb-4772-8ead-f16c7aae2fb1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c27abc56-72ca-4c75-96b6-09b301fce90b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BrakeStart"",
                    ""type"": ""Button"",
                    ""id"": ""5e9f3b79-67a5-4d92-aad6-4ea0675c50c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BrakeEnd"",
                    ""type"": ""Button"",
                    ""id"": ""a1bd84dd-bcda-430a-96f8-43833304c9d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurboStart"",
                    ""type"": ""Button"",
                    ""id"": ""8814fb14-7d26-4a02-b4a1-b60a1171db5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurboEnd"",
                    ""type"": ""Button"",
                    ""id"": ""b0a34a02-bdc7-48c9-852d-cfca1cd6d2cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoWheelsStart"",
                    ""type"": ""Button"",
                    ""id"": ""014d5f70-21ba-48c2-8da9-d663e20eac78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoWheelsEnd"",
                    ""type"": ""Button"",
                    ""id"": ""20827dd0-51bd-4f30-b13e-5e92ffb512d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d57fbf0b-5f5a-4340-9a4a-807e549ca331"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4544c64e-669f-403e-89a1-414a68e903a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cd067136-b9a8-4203-8229-9b3066f19e9e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7179a9b9-3080-4067-9e5b-f9f25f00685a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dceb9ec5-b258-4d42-84f0-64c32615d3ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""75c5913f-f855-46d8-ba5e-958e79cf7321"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f4c8f733-7dea-436a-8925-f9fe6b8a0e84"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrakeStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5574a27-01a6-49e1-bf11-832b38e885b3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrakeEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d89ce86b-8e0e-4add-8882-902a65f47dec"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurboStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1beac41-bd85-45e7-a283-4c8b4a74586a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurboEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02ed4da0-be31-461a-8364-fdaf91548eed"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoWheelsStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""097ea820-6dbe-4d33-9bb2-55effaa9da24"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoWheelsEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_BrakeStart = m_Player.FindAction("BrakeStart", throwIfNotFound: true);
        m_Player_BrakeEnd = m_Player.FindAction("BrakeEnd", throwIfNotFound: true);
        m_Player_TurboStart = m_Player.FindAction("TurboStart", throwIfNotFound: true);
        m_Player_TurboEnd = m_Player.FindAction("TurboEnd", throwIfNotFound: true);
        m_Player_TwoWheelsStart = m_Player.FindAction("TwoWheelsStart", throwIfNotFound: true);
        m_Player_TwoWheelsEnd = m_Player.FindAction("TwoWheelsEnd", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_BrakeStart;
    private readonly InputAction m_Player_BrakeEnd;
    private readonly InputAction m_Player_TurboStart;
    private readonly InputAction m_Player_TurboEnd;
    private readonly InputAction m_Player_TwoWheelsStart;
    private readonly InputAction m_Player_TwoWheelsEnd;
    public struct PlayerActions
    {
        private @Input_Manager m_Wrapper;
        public PlayerActions(@Input_Manager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @BrakeStart => m_Wrapper.m_Player_BrakeStart;
        public InputAction @BrakeEnd => m_Wrapper.m_Player_BrakeEnd;
        public InputAction @TurboStart => m_Wrapper.m_Player_TurboStart;
        public InputAction @TurboEnd => m_Wrapper.m_Player_TurboEnd;
        public InputAction @TwoWheelsStart => m_Wrapper.m_Player_TwoWheelsStart;
        public InputAction @TwoWheelsEnd => m_Wrapper.m_Player_TwoWheelsEnd;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @BrakeStart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrakeStart;
                @BrakeStart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrakeStart;
                @BrakeStart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrakeStart;
                @BrakeEnd.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrakeEnd;
                @BrakeEnd.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrakeEnd;
                @BrakeEnd.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrakeEnd;
                @TurboStart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurboStart;
                @TurboStart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurboStart;
                @TurboStart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurboStart;
                @TurboEnd.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurboEnd;
                @TurboEnd.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurboEnd;
                @TurboEnd.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurboEnd;
                @TwoWheelsStart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTwoWheelsStart;
                @TwoWheelsStart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTwoWheelsStart;
                @TwoWheelsStart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTwoWheelsStart;
                @TwoWheelsEnd.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTwoWheelsEnd;
                @TwoWheelsEnd.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTwoWheelsEnd;
                @TwoWheelsEnd.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTwoWheelsEnd;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @BrakeStart.started += instance.OnBrakeStart;
                @BrakeStart.performed += instance.OnBrakeStart;
                @BrakeStart.canceled += instance.OnBrakeStart;
                @BrakeEnd.started += instance.OnBrakeEnd;
                @BrakeEnd.performed += instance.OnBrakeEnd;
                @BrakeEnd.canceled += instance.OnBrakeEnd;
                @TurboStart.started += instance.OnTurboStart;
                @TurboStart.performed += instance.OnTurboStart;
                @TurboStart.canceled += instance.OnTurboStart;
                @TurboEnd.started += instance.OnTurboEnd;
                @TurboEnd.performed += instance.OnTurboEnd;
                @TurboEnd.canceled += instance.OnTurboEnd;
                @TwoWheelsStart.started += instance.OnTwoWheelsStart;
                @TwoWheelsStart.performed += instance.OnTwoWheelsStart;
                @TwoWheelsStart.canceled += instance.OnTwoWheelsStart;
                @TwoWheelsEnd.started += instance.OnTwoWheelsEnd;
                @TwoWheelsEnd.performed += instance.OnTwoWheelsEnd;
                @TwoWheelsEnd.canceled += instance.OnTwoWheelsEnd;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBrakeStart(InputAction.CallbackContext context);
        void OnBrakeEnd(InputAction.CallbackContext context);
        void OnTurboStart(InputAction.CallbackContext context);
        void OnTurboEnd(InputAction.CallbackContext context);
        void OnTwoWheelsStart(InputAction.CallbackContext context);
        void OnTwoWheelsEnd(InputAction.CallbackContext context);
    }
}
